# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as services.
# These services are built from the Dockerfile in their respective current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  frontend:
    build:
      context: frontend/
      dockerfile: frontend.Dockerfile
    environment:
      NODE_ENV: development
    ports:
      - 3000:3000
    volumes:
      - ./frontend/public:/app/public
    depends_on:
      backend:
        condition: service_healthy
        restart: true
    healthcheck:
      test: curl -f http://localhost:3000/health || exit 1
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 10s
    develop:
      watch:
        - path: .
          action: rebuild
  #----------------------------------------------------------------
  backend:
    build:
      context: backend/
      dockerfile: backend.Dockerfile
      target: final
    ports:
      - 4000:4000
    volumes:
      - ./backend/:/src/database
    healthcheck:
      test: curl -f http://localhost:4000/health || exit 1
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 10s
    develop:
      watch:
        - path: .
          action: rebuild

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt
